{"pageProps":{"data":{"slug":"2-property-decorator","frontMatter":{"id":2,"title":"3. Property Decorator","category":"Typescript Decorator","language":"Typescript","difficulty":"Medium","source":null,"source_url":null,"created_at":"2024-03-05","updated_at":"2024-03-05","is_playground":false,"is_comment":false},"content":"Property decorators are generally not used alone, but are mainly used in combination with class or method decorators for composite decoration.\n\n## Parameters\n\n*   The property decorator function has two parameters: **target**\n\n    *   For regular properties, *target* is the prototype of the current object. In other words, if *Employee* is an object, then *target* is `Employee.prototype`.\n\n    *   For static properties, *target* is the class of the current object.\n\n**propertyKey**\n\n```typescript\nconst userRoles: string[] = [];\n\n// Assign the role to userRoles through property decorators.\nconst RoleDecorator = (roles: string[]) => (target: any, key: string) => {\n    roles.forEach((role) => userRoles.push(role));\n};\n\n// Generate a Roles object based on userRoles and assign it to the roles property of the class prototype.\nconst SetRoleDecorator = <\n    T extends new (...args: any[]) => {\n        [key: string]: any;\n    },\n    >(\n    constructor: T,\n) => {\n    const roles = [\n        { name: 'super-admin', desc: 'Super administrator' },\n        { name: 'admin', desc: 'Administrator' },\n        { name: 'user', desc: 'Client' },\n    ];\n    return class extends constructor {\n        constructor(...args: any) {\n            super(...args);\n            this.roles = roles.filter((role) => userRoles.includes(role.name));\n        }\n    };\n};\n\n@SetRoleDecorator\nclass UserEntity {\n    @RoleDecorator(['admin', 'user'])\n    roles: string[] = [];\n}\n\nexport const exp5 = () => {\n    console.log();\n    console.log(\n        '-----------------------Property decorator-----------------------',\n    );\n    console.log(\n        '-----------------------Filter user list based on permissions using decorators.--------------------',\n    );\n    console.log();\n    const user = new UserEntity();\n    console.log(user.roles);\n    console.log();\n    console.log('-----------------------End-----------------------');\n};\n\n// console [ { name: 'admin', desc: 'Administrator' }, { name: 'user', desc: 'Client' } ]\n```\n","props":{"readingTimeMinutes":1,"description":"Property decorators are generally not used alone, but are mainly used in combination with class or..."}},"prev":{"title":"2. Class Decorator","href":"/learn/typescript-decorator/1-class-decorator"},"next":{"title":"4. Method Decorator","href":"/learn/typescript-decorator/3-method-decorator"}},"__N_SSG":true}