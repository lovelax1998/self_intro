{"pageProps":{"data":{"slug":"9-evaluation","frontMatter":{"id":9,"title":"10. Decorator Evaluation","category":"Typescript Decorator","language":"Typescript","difficulty":"Medium","source":null,"source_url":null,"created_at":"2024-03-05","updated_at":"2024-03-05","is_playground":false,"is_comment":false},"content":"Parameters decorators -> Methods decorators -> Accessor/Property decorators -> Class decorators\n\n> It is particularly important to note the [difference](https://stackoverflow.com/questions/48509376/whats-the-difference-between-reflect-getmetadata-and-reflect-getownmetadata) between getMetadata and getOwnMetadata.\n\nThere is a well defined order to how decorators applied to various declarations inside of a class are applied:\n\n1.  *Parameter Decorators*, followed by *Method*, *Accessor*, or *Property Decorators* are applied for each instance member.\n2.  *Parameter Decorators*, followed by *Method*, *Accessor*, or *Property Decorators* are applied for each static member.\n3.  *Parameter Decorators* are applied for the constructor.\n4.  *Class Decorators* are applied for the class.\n\n```typescript\n\n/**\n * Decorator Evaluation\n */\nimport { UserType } from './exp7-8';\nimport { UserService as ParentUserService } from './exp9-10';\n\nconst requiredMetadataKey = Symbol('required');\n\nexport const RequiredDecorator = (\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number,\n) => {\n    const existingRequiredParameters: number[] =\n        Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];\n    existingRequiredParameters.push(parameterIndex);\n    Reflect.defineMetadata(\n        requiredMetadataKey,\n        existingRequiredParameters,\n        target,\n        propertyKey,\n    );\n};\n\nexport const ValidateDecorator = (\n    target: any,\n    propertyName: string,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => any>,\n) => {\n    const method = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n        const requiredParameters: number[] = Reflect.getOwnMetadata(\n            requiredMetadataKey,\n            target,\n            propertyName,\n        );\n        if (requiredParameters) {\n            for (const parameterIndex of requiredParameters) {\n                if (\n                    parameterIndex >= args.length ||\n                    args[parameterIndex] === undefined\n                ) {\n                    throw new Error('Missing required argument.');\n                }\n            }\n        }\n\n        return method.apply(this, args);\n    };\n};\n\nclass UserService extends ParentUserService {\n    @ValidateDecorator\n    createUser(@RequiredDecorator username?: string, id?: number) {\n        const ids: number[] = this.users.map((userEntity) => userEntity.id);\n        const newUser: UserType = {\n            // If the ID parameter is not provided, the ID of the new user will be the maximum ID of all users plus 1.\n            id: id || Math.max(...ids) + 1,\n            // If the username parameter is not provided, a random string will be generated as the username.\n            username: username || Math.random().toString(36).substring(2, 15),\n        };\n        this.users.push(newUser);\n        return newUser;\n    }\n}\n\nexport const exp11 = () => {\n    console.log();\n    console.log(\n        '-----------------------Decorator Evaluation-----------------------',\n    );\n    console.log(\n        '-----------------------Provide mandatory validation for the username parameter.-----------------------',\n    );\n    console.log();\n    const user = new UserService();\n    user.createUser();\n    console.log(user.getUsers());\n    console.log();\n    console.log(\n        '-----------------------End-----------------------',\n    );\n};\n```\n","props":{"readingTimeMinutes":1,"description":"Parameters decorators -> Methods decorators -> Accessor/Property decorators -> Class decorators\n\n>..."}},"prev":{"title":"9. Decorator Composition","href":"/learn/typescript-decorator/8-composition"},"next":null},"__N_SSG":true}