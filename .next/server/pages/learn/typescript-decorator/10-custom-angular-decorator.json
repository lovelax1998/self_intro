{"pageProps":{"data":{"slug":"10-custom-angular-decorator","frontMatter":{"id":9,"title":"10. A Useful Custom Decorator in Angular","category":"Typescript Decorator","language":"Typescript","difficulty":"Medium","source":null,"source_url":null,"created_at":"2024-03-05","updated_at":"2024-03-05","is_playground":false,"is_comment":false},"content":"By customizing the `getter/setter` interception scheme to convert data, we got this decorator.\n\n## Basic implementation\n\n```ts\nexport function ObservableInput<\n  T = any,\n  SK extends keyof T = any,\n  K extends keyof T = any\n>(propertyKey?: K | boolean, initialValue?: SubjectType<T[SK]>) {\n  return (target: T, sPropertyKey: SK) => {\n    const symbol = Symbol();\n\n    type ST = SubjectType<T[SK]>;\n\n    type Mixed = T & {\n      [symbol]: BehaviorSubject<ST>;\n    } & Record<SK, BehaviorSubject<ST>>;\n\n    Object.defineProperty(target, sPropertyKey, {\n      enumerable: true,\n      configurable: true,\n      get(this: Mixed) {\n        return (\n          this[symbol] || (this[symbol] = new BehaviorSubject<ST>(initialValue))\n        );\n      },\n      set(this: Mixed, value: ST) {\n        this[sPropertyKey].next(value);\n      },\n    });\n\n    if (!propertyKey) {\n      return;\n    }\n\n    if (propertyKey === true) {\n      // Automatically match attribute names and remove the trailing $ symbol.\n      propertyKey = (sPropertyKey as string).replace(/\\$+$/, '') as K; \n    }\n\n    Object.defineProperty(target, propertyKey, {\n      enumerable: true,\n      configurable: true,\n      get(this: Mixed) {\n        return this[sPropertyKey].getValue();\n      },\n      set(this: Mixed, value: ST) {\n        this[sPropertyKey].next(value);\n      },\n    });\n  };\n}\n```\n\n## Usages\n\n```ts\n// Usage one\n@Component({})\nexport class DemoComponent {\n  @ObservableInput() // Automatically bind the value of \"name\", that is, remove the \"$\" symbol at the end of \"name$$\".\n  @Input('name')\n  name$$: Observable<string>;\n\n  name: string;\n}\n\n// Usage three\n@Component({})\nexport class DemoComponent {\n  @ObservableInput('nameValue') // Automatically bind the value of nameValue Input.\n  name$$: Observable<string>;\n\n  @Input()\n  nameValue: string;\n}\n```\n\n## One more thing\n\nYou can find out this decorator in [ObservableInput](https://github.com/rx-ts/ngrx/blob/master/src/utils/decorators.ts#L56), or similar decorator in [ngx-observable-input](https://github.com/Futhark/ngx-observable-input).\n","props":{"readingTimeMinutes":1,"description":"By customizing the `getter/setter` interception scheme to convert data, we got this decorator.\n\n##..."}},"prev":{"title":"9. Decorator Composition","href":"/learn/typescript-decorator/8-composition"},"next":null},"__N_SSG":true}