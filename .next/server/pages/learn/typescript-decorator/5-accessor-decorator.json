{"pageProps":{"data":{"slug":"5-accessor-decorator","frontMatter":{"id":5,"title":"6. Accessor Decorator","category":"Typescript Decorator","language":"Typescript","difficulty":"Medium","source":null,"source_url":null,"created_at":"2024-03-05","updated_at":"2024-03-05","is_playground":false,"is_comment":false},"content":"Accessor is actually just a method with the prefix \"get\" or \"set\", used to get and set some properties in a way that calls the property. The usage of decorators is no different from regular methods, except that when getting the value, it calls the \"get\" and \"set\" of the descriptor to replace the value. For example, if we add a field \"*nickname*\", we can add a custom prefix to set \"*nickname*\" and prevent the value of \"*nickname*\" from appearing when iterating through the \"*user*\" object. We can also add a field \"*fullname*\" and generate a string suffix when setting \"*nickname*\".\n\n```typescript\n\nexport const HiddenDecorator = () => {\n    return (\n        target: any,\n        propertyName: string,\n        descriptor: PropertyDescriptor,\n    ) => {\n        descriptor.enumerable = false;\n    };\n};\n\nexport const PrefixDecorator = (prefix: string) => {\n    return (\n        target: any,\n        propertyName: string,\n        descriptor: PropertyDescriptor,\n    ) => {\n        return {\n            ...descriptor,\n            set(value: string) {\n                descriptor.set.apply(this, [`${prefix}_${value}`]);\n            },\n        };\n    };\n};\n\nexport class UserEntity {\n    private _nickname: string;\n    private fullname: string;\n\n    @HiddenDecorator()\n    @PrefixDecorator('Shen ')\n    get nickname() {\n        return this._nickname;\n    }\n\n    set nickname(value: string) {\n        this._nickname = value;\n        this.fullname = `${value}_fullname`;\n    }\n}\n\nexport const exp78 = () => {\n    // ...\n\n    console.log();\n    console.log(\n        '-----------------------Accessor Decorator-----------------------',\n    );\n    console.log(\n        '-----------------------prohibit nickname show when iterating through UserEntity-----------',\n    );\n  console.log(\n        '-----------------------Add a prefix to the nickname.-----------------------',\n    );\n    console.log();\n    const user = new UserEntity();\n\n    user.nickname = 'brian';\n    console.log(user);\n    console.log(user.nickname);\n    console.log();\n    console.log('-----------------------End-----------------------');\n};\n\n```\n","props":{"readingTimeMinutes":1,"description":"Accessor is actually just a method with the prefix \"get\" or \"set\", used to get and set some..."}},"prev":{"title":"5. Parameter Decorator","href":"/learn/typescript-decorator/4-parameter-decorator"},"next":{"title":"7. Create A Decorator","href":"/learn/typescript-decorator/6-create-decorator"}},"__N_SSG":true}