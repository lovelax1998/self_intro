{"pageProps":{"data":{"slug":"6-create-decorator","frontMatter":{"id":6,"title":"7. Create A Decorator","category":"Typescript Decorator","language":"Typescript","difficulty":"Medium","source":null,"source_url":null,"created_at":"2024-03-05","updated_at":"2024-03-05","is_playground":false,"is_comment":false},"content":"There are many ways to overload methods through decorators, you can choose according to your own preferences. The following are a few examples.\n\n## With Extends\n\nUsually used to add attributes or methods in class decorators, for example:\n\n```typescript\n return <T extends new (...args: any[]) => any>(target: T) => {\n    return class extends target {\n      getMyName() {\n        return this._name;\n      }\n    };\n  };\n```\n\n## With Prototype\n\nUsually used to overload constructors and add properties or methods on class decorators, for example:\n\n```typescript\nconst ProfileDerorator = (profile: UserProfile) => {\n  return (target: any) => {\n    const original = target;\n    function constructor(...args: any[]) {\n      console.log('contruct has been changed');\n      return new original(...args);\n    }\n    // copy prototype\n    constructor.prototype = original.prototype;\n    // Add a static property\n    constructor.myinfo = `myinfo ${userinfo}`;\n    return constructor as typeof original;\n  };\n};\n```\n\n## With Assignment\n\nGenerally used to modify a descriptor on a method decorator, for example:\n\n```typescript\nconst loggerDecorator = () => {\n  return function logMethod(\n    target: Object,\n    propertyName: string,\n    propertyDescriptor: PropertyDescriptor,\n  ): PropertyDescriptor {\n    const method = propertyDescriptor.value;\n    // Overwrite method\n    propertyDescriptor.value = function async (...args: any[]) {...};\n    return propertyDescriptor;\n  };\n};\n```\n\n## With ES6 Spread Operator\n\nSimilar to the assignment method, but using the ES6+ spread syntax, it is easier to understand and use, for example:\n\n```typescript\nconst parseFunc = (\n  target: Object,\n  propertyName: string,\n  descriptor: PropertyDescriptor,\n): PropertyDescriptor => {\n  return {\n    ...descriptor,\n    value(...args: any[]) {\n      const newArgs = parseConf.map((toParse, index) => toParse(args[index]));\n\n      return descriptor.value.apply(this, newArgs);\n    },\n  };\n};\n```\n","props":{"readingTimeMinutes":1,"description":"There are many ways to overload methods through decorators, you can choose according to your own..."}},"prev":{"title":"6. Accessor Decorator","href":"/learn/typescript-decorator/5-accessor-decorator"},"next":{"title":"8. Metadata","href":"/learn/typescript-decorator/7-metadata"}},"__N_SSG":true}